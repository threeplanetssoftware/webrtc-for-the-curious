<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on WebRTC for the Curious</title><link>https://webrtcforthecurious.com/docs/</link><description>Recent content in Docs on WebRTC for the Curious</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://webrtcforthecurious.com/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>What, Why and How</title><link>https://webrtcforthecurious.com/docs/01-what-why-and-how/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/01-what-why-and-how/</guid><description>What is WebRTC? # WebRTC, short for Web Real-Time Communication, is both an API and a Protocol. The WebRTC protocol is a set of rules for two WebRTC agents to negotiate bi-directional secure real-time communication. The WebRTC API then allows developers to use the WebRTC protocol. The WebRTC API is specified only for Javascript.
A similar relationship would be HTTP and the fetch API. WebRTC the protocol would be HTTP, and WebRTC the API would be the fetch API.</description></item><item><title>Signaling</title><link>https://webrtcforthecurious.com/docs/02-signaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/02-signaling/</guid><description>What is WebRTC Signaling? # When you create a WebRTC agent it knows nothing about the other peer. It has no idea who it is going to connect with or what they are going to send! Signaling is the initial bootstrapping that makes the call possible. After these values are exchanged the WebRTC agents then can communicate directly with each other.
Signaling messages are just text. The WebRTC agents don&amp;rsquo;t care how they are transported.</description></item><item><title>Connecting</title><link>https://webrtcforthecurious.com/docs/03-connecting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/03-connecting/</guid><description>Why does WebRTC need a dedicated subsystem for connecting? # WebRTC will go to great lengths to achieve direct bi-directional communication between two WebRTC Agents. This connection style is also known as peer-to-peer. Establishing peer-to-peer connectivity can be difficult though. These agents could be in different networks with no direct connectivity!
In situations where direct connectivity does exist you can have other issues. In some cases, your clients don&amp;rsquo;t speak the same network protocols (UDP &amp;lt;-&amp;gt; TCP) or maybe IP Versions (IPv4 &amp;lt;-&amp;gt; IPv6).</description></item><item><title>Securing</title><link>https://webrtcforthecurious.com/docs/04-securing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/04-securing/</guid><description>What security does WebRTC have? # Every WebRTC connection is authenticated and encrypted. You can be confident that a 3rd party can&amp;rsquo;t see what you are sending. They also can&amp;rsquo;t insert bogus messages. You can also be sure the WebRTC Agent that generated the Session Description is the one you are communicating with.
It is very important that no one tampers with those messages. It is ok if a 3rd party reads the Session Description in transit.</description></item><item><title>Media Communication</title><link>https://webrtcforthecurious.com/docs/05-media-communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/05-media-communication/</guid><description>What do I get from WebRTC&amp;rsquo;s media communication? # WebRTC allows you to send and receive an unlimited amount of audio and video streams. You can add and remove these streams at anytime during a call. These streams could all be independent, or they could be bundled together! You could send a video feed of your desktop, and then include audio/video from your webcam.
The WebRTC protocol is codec agnostic.</description></item><item><title>Data Communication</title><link>https://webrtcforthecurious.com/docs/06-data-communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/06-data-communication/</guid><description>What is Data Channel? # Questions From The Curious # I know many of you have a bunch of questions similar to the ones shown below. Let&amp;rsquo;s get them quickly answered first! (Click on the questions to expand for the answer.)
Question: What’s the difference from TCP? ↕ Short Answer:
Peer-to-peer connection (NAT traversal) is possible. While it provides &amp;ldquo;guaranteed delivery&amp;rdquo; like TCP, it also provides none-reliable delivery like UDP.</description></item><item><title>Applied WebRTC</title><link>https://webrtcforthecurious.com/docs/07-applied-webrtc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/07-applied-webrtc/</guid><description>Applied WebRTC # Now that you know how WebRTC works it is time to build with it. This chapter explores what people are building with WebRTC, and how they are building it. You will learn all the interesting things that are happening with WebRTC. The power of WebRTC comes as a cost. Building production grade WebRTC services is challenging. This chapter will try and explain those challenges before you hit them.</description></item><item><title>Debugging</title><link>https://webrtcforthecurious.com/docs/08-debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/08-debugging/</guid><description>Debugging # Debugging WebRTC can be a daunting task. There are a lot of moving parts, and they all can break independently. If you aren&amp;rsquo;t careful you can lose weeks of time looking at the wrong things. When you do finally find the part that is broken you will need to learn a bit to understand it.
This chapter will get you in the mindset to debug WebRTC. It will show you how to break down the problem.</description></item><item><title>History</title><link>https://webrtcforthecurious.com/docs/09-history-of-webrtc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/09-history-of-webrtc/</guid><description>History # This section is ongoing and we don’t have all the facts yet. We are conducting interviews and build a history of digital communication.
RTP # RTP and RTCP is the protocol that handles all media transport for WebRTC. It was defined in RFC 1889 in January 1996. We are very lucky to have one of the authors Ron Frederick talk about it himself. Ron recently uploaded Network Video tool, a project that informed RTP.</description></item><item><title>FAQ</title><link>https://webrtcforthecurious.com/docs/10-faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/10-faq/</guid><description>FAQ #</description></item><item><title>Contributing</title><link>https://webrtcforthecurious.com/docs/11-contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/11-contributing/</guid><description>Contributing #</description></item></channel></rss>